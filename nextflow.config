// Nextflow configuration for GenePhenExtract pipeline

// Default parameters
params {
    // Input
    genes = 'genes.txt'                    // File with one gene per line
    max_papers_per_gene = 50               // Max papers to process per gene
    date_range_start = 2020                // Start year for PubMed search
    date_range_end = 2024                  // End year for PubMed search

    // LLM configuration
    llm_provider = 'claude'                // 'claude', 'openai', or 'gemini'
    llm_model = 'claude-3-5-sonnet-20241022'
    enable_cost_filter = true              // Use cheap model to filter first

    // Output
    outdir = 'results'                     // Output directory
    publish_mode = 'copy'                  // 'copy', 'symlink', or 'move'

    // PubMed API
    pubmed_email = null                    // Email for PubMed (required for high volume)
    pubmed_api_key = null                  // Optional PubMed API key

    // Processing options
    download_pdfs = false                  // Download supplementary PDFs
    use_full_text = true                   // Use PMC full text when available
    enable_hpo_mapping = true              // Map phenotypes to HPO terms
}

// Process resource defaults
process {
    // Default resources
    cpus = 1
    memory = '4 GB'
    time = '1h'

    // Error handling
    errorStrategy = 'retry'
    maxRetries = 3

    // Per-process configuration
    withName: SEARCH_PUBMED {
        cpus = 1
        memory = '2 GB'
        time = '30m'
    }

    withName: FETCH_PAPERS {
        cpus = 1
        memory = '2 GB'
        time = '30m'
        maxForks = 10                      // Limit concurrent PubMed requests
    }

    withName: EXTRACT_DATA {
        cpus = 1
        memory = '4 GB'
        time = '2h'
        maxForks = 20                      // Limit concurrent LLM API calls
        errorStrategy = 'ignore'           // Don't fail pipeline if some papers fail
    }

    withName: AGGREGATE_BY_GENE {
        cpus = 2
        memory = '8 GB'
        time = '1h'
    }

    withName: CREATE_FINAL_REPORT {
        cpus = 2
        memory = '8 GB'
        time = '1h'
    }
}

// Execution profiles
profiles {
    // Local execution (default)
    standard {
        process.executor = 'local'
        process.container = 'genephenextract:latest'
        docker.enabled = true
    }

    // Local without Docker
    local {
        process.executor = 'local'
    }

    // SLURM cluster
    slurm {
        process.executor = 'slurm'
        process.queue = 'general'
        process.container = 'genephenextract:latest'
        singularity.enabled = true
        singularity.autoMounts = true
    }

    // AWS Batch
    aws {
        process.executor = 'awsbatch'
        process.queue = 'genephenextract-queue'
        process.container = 'your-ecr-repo/genephenextract:latest'
        aws.region = 'us-east-1'
        aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
    }

    // Google Cloud
    gcp {
        process.executor = 'google-lifesciences'
        process.container = 'gcr.io/your-project/genephenextract:latest'
        google.region = 'us-central1'
        google.project = 'your-gcp-project'
    }

    // Testing (small subset)
    test {
        params.max_papers_per_gene = 5
        params.llm_provider = 'mock'       // Use MockExtractor for testing
    }
}

// Resource limits for different environments
executor {
    // Local
    $local {
        cpus = 8
        memory = '32 GB'
    }

    // SLURM
    $slurm {
        queueSize = 100
        submitRateLimit = '10 sec'
    }

    // AWS Batch
    $awsbatch {
        queueSize = 1000
        submitRateLimit = '50 sec'
    }
}

// Enable reports
report {
    enabled = true
    file = "${params.outdir}/reports/execution_report.html"
}

timeline {
    enabled = true
    file = "${params.outdir}/reports/timeline.html"
}

trace {
    enabled = true
    file = "${params.outdir}/reports/trace.txt"
}

dag {
    enabled = true
    file = "${params.outdir}/reports/dag.svg"
}

// Manifest
manifest {
    name = 'GenePhenExtract Pipeline'
    author = 'Brett Kroncke'
    description = 'Extract genotype-phenotype associations from PubMed literature using LLMs'
    mainScript = 'main.nf'
    version = '0.1.0'
    nextflowVersion = '>=23.04.0'
}
